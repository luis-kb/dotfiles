#+TITLE: Simple emacs configuration
#+AUTHOR: Luis Diaz
#+STARTUP: overview

* Personal keybindings

Here are some keybindings that I've found can make it nicer to work
with emacs.

** First non-whitespace character in line

This is every so slightly different to the beginning of the line, and
a motion I fell in love with in vim:

#+begin_src elisp
  (global-set-key (kbd "C-c a") 'beginning-of-line-text)

#+end_src

* Vertico

#+begin_src elisp
  ;; Enable Vertico.
  (use-package vertico
    ;; :custom
    ;; (vertico-scroll-margin 0) ;; Different scroll margin
    ;; (vertico-count 20) ;; Show more candidates
    ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    ;; (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; Emacs minibuffer configurations.
  (use-package emacs
    :custom
    ;; Enable context menu. `vertico-multiform-mode' adds a menu in the minibuffer
    ;; to switch display modes.
    (context-menu-mode t)
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Do not allow the cursor in the minibuffer prompt
    (minibuffer-prompt-properties
     '(read-only t cursor-intangible t face minibuffer-prompt)))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :ensure t
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

#+end_src

* Consult

Better completions using consult. This section will require a lot of
tinkering, getting used to and exploration. It is very clear that both
consult and vertico are packages that will require a lot of learning
and understanding in the following weeks. This document needs to be
updated after the fact.

#+begin_src elisp
  ;; Example configuration for Consult
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves the
    ;; register formatting, adds thin separator lines, register sorting and hides
    ;; the window mode line.
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
    )

#+end_src

* LSP

#+begin_src emacs-lisp
  ;; (use-package eglot
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'c-mode-hook 'eglot-ensure)
  ;;   (add-hook 'c++-mode-hook 'eglot-ensure))
  ;; (use-package company
  ;; :after eglot
  ;; :hook (eglot-managed-mode . company-mode))  
#+end_src

* AI

** GPTel

#+BEGIN_SRC emacs-lisp
          (use-package gptel
            :ensure t
            :config
            (setq
             gptel-model 'gemini-2.5-flash
             gptel-backend (gptel-make-gemini "Gemini"
    					 :key (getenv "GEMINI_API_KEY")
  					 :stream t)))
#+END_SRC

* Misc Configuration

** Save and backup files

These can get really annoying, therefore, let's go ahead and move them
to a central location.

#+begin_src emacs-lisp
;; Create a directory for backups and auto-saves if it doesn't exist
(let ((backup-dir "~/.config/emacs/backups/"))
  (when (not (file-directory-p backup-dir))
    (make-directory backup-dir t))

  ;; Configure backup files to be stored in the centralized directory
  (setq backup-directory-alist `(("." . ,backup-dir)))

  ;; Configure auto-save files to be stored in the centralized directory
  (setq auto-save-file-name-transforms `((".*" ,(concat backup-dir "auto-save-") t)))
  (setq auto-save-list-file-prefix (concat backup-dir "auto-save-list")))
#+end_src

* Display

** Toolbars etc

The toolbars help nobody...

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

** Pretty colours

#+begin_src emacs-lisp
  (load-theme 'leuven-dark)
#+end_src

** Relative line numbers

Useful stuff from the vim days:

#+begin_src emacs-lisp
  ;; Make sure we show line numbers
  (global-display-line-numbers-mode)

  ;; Set the line numbers to relative
  (setq display-line-numbers-type 'relative)
#+end_src

** Maximisation

Make sure that we're always starting emacs in fullscreen mode.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

* Org Mode

** Org Tempo

Very useful org quoting commands such as `<q` and `<s`

#+begin_src emacs-lisp
  (use-package org-tempo)
#+end_src

** Fill mode

Start auto fill mode whenever org mode is started

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+end_src

** Roam

Zettelkasten stuff

#+begin_src emacs-lisp
    (use-package org-roam
      :ensure t
      :config
      (unless (file-exists-p "~/.roam")
        (make-directory "~/.roam"))
      (setq org-roam-directory (file-truename "~/.roam")))

#+end_src

* Vertico

Mini buffer better completions

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t)

#+end_src

* Languages

** Tree sitter

Better syntax highlighting and parsing with tree sitter

#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t)
  (use-package tree-sitter-langs
    :ensure t)
#+end_src

Then we need to set up the language source for common languages that
we use and will need tree-sitter support for:

#+begin_src emacs-lisp
  (setq treesit-language-source-alist
   '((bash "https://github.com/tree-sitter/tree-sitter-bash")
     (c "https://github.com/tree-sitter/tree-sitter-c")
     (cmake "https://github.com/uyha/tree-sitter-cmake")
     (common-lisp "https://github.com/tree-sitter-grammars/tree-sitter-commonlisp")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (elixir "https://github.com/elixir-lang/tree-sitter-elixir")
     (erlang "https://github.com/WhatsApp/tree-sitter-erlang")
     (go "https://github.com/tree-sitter/tree-sitter-go")
     (haskell "https://github.com/tree-sitter/tree-sitter-haskell")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (make "https://github.com/alemuller/tree-sitter-make")
     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
     (ocaml "https://github.com/tree-sitter/tree-sitter-ocaml")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (rust "https://github.com/tree-sitter/tree-sitter-rust")
     (toml "https://github.com/tree-sitter/tree-sitter-toml")
     (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
     (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
#+end_src

** Mapping modes

Make sure that we start language specific modes whenever we open a
file with that extension:

*** Typescript/TSX

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
#+end_src

*** Javascript/JSX

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js-jsx-mode))
#+end_src

*** Rust

#+begin_src emacs-lisp
  (use-package rust-mode
  :ensure t
  :init
  (setq rust-mode-treesitter-derive t))
#+end_src

*** Common lisp

#+begin_src emacs-lisp
  (use-package slime
    :ensure t)

  (setq inferior-lisp-program "sbcl")

  (add-to-list 'auto-mode-alist '("\\.cl\\'" . common-lisp-mode))
#+end_src

* Magit

#+begin_src elisp
  (use-package magit
    :ensure t)

#+end_src
